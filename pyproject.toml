[tool.poetry]
name = "plate-simulation"
version = "0.1.0-beta.1"
license = "MIT"
description = "plate-simulation is a Python package"
authors = ["Mira Geoscience <support@mirageoscience.com>"]
readme = "README.rst"
repository = "https://github.com/MiraGeoscience/plate-simulation"
documentation  = "https://mirageoscience-plate-simulation.readthedocs-hosted.com/"
homepage = "https://mirageoscience.com"
keywords = []

# TODO: adjust classifiers
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Natural Language :: English",
]

packages = [
    { include = "plate_simulation" },
    { include = "plate_simulation-assets" },
]

include = [
    { path = "COPYING", format = ["sdist", "wheel"] },
    { path = "COPYING.LESSER", format = ["sdist", "wheel"] },
    { path = "LICENSE", format = ["sdist", "wheel"] },
    { path = "README.rst", format = ["sdist", "wheel"] },
    { path = "THIRD_PARTY_SOFTWARE.rst", format = ["sdist", "wheel"] },
    { path = "docs/**/THIRD_PARTY_SOFTWARE.rst", format = ["sdist", "wheel"] },
]

exclude = [
]

[tool.poetry.dependencies]
python = "^3.10, <3.11"

numpy = "~1.26"  # also geoh5py, simpeg and geoana
scipy = "~1.14"
discretize = "~0.10.0"
Rtree = "~1.2.0"
trimesh = "~4.1.3"
threadpoolctl = "~3.3.0"
pydantic = "~2.5.2"

## Pip dependencies from Git repositories
#----------------------------------------
#geoh5py = {version = "~0.9.0rc2", source = "pypi", allow-prereleases = true}
#geoh5py = {url = "https://github.com/MiraGeoscience/geoh5py/archive/refs/heads/develop.zip"}
geoh5py = {git = "https://github.com/MiraGeoscience/geoh5py.git", rev = "develop"}
#geoh5py = {url = "http://localhost:8888/geoh5py.tar.gz#sha256="}

#octree-creation-app = {version = "~0.1.0rc2", source = "pypi", allow-prereleases = true}
# already through simpeg-driver: do need to repeat until on PyPI, or conda-lock fails to resolve
#octree-creation-app = {url = "https://github.com/MiraGeoscience/octree-creation-app/archive/refs/heads/GEOPY-1569.zip"}
octree-creation-app = {git = "https://github.com/MiraGeoscience/octree-creation-app.git", rev = "develop"}
#octree-creation-app = {url = "http://localhost:8888/octree-creation-app.tar.gz#sha256="}

#geoapps-utils = {version = "~0.3.0rc3", source = "pypi", allow-prereleases = true}
#geoapps-utils = {url = "https://github.com/MiraGeoscience/geoapps-utils/archive/refs/heads/develop.zip"}
geoapps-utils = {git = "https://github.com/MiraGeoscience/geoapps-utils.git", rev = "develop"}
#geoapps-utils = {url = "http://localhost:8888/geoapps-utils.tar.gz#sha256="}

#mira-simpeg = {version = ">=0.19.0.8rc1,<0.19.0.8.post999", source = "pypi", allow-prereleases = true, extras = ["dask"]}
#mira-simpeg = {url = "https://github.com/MiraGeoscience/simpeg/archive/refs/heads/develop.zip", extras = ["dask"]}
mira-simpeg = {git = "https://github.com/MiraGeoscience/simpeg.git", rev = "develop"}
#mira-simpeg = {url = "http://localhost:8888/mira-simpeg.tar.gz#sha256=", extras = ["dask"]}

#param-sweeps = {version = "~0.1.7rc2", source = "pypi", allow-prereleases = true}
#param-sweeps = {url = "https://github.com/MiraGeoscience/param-sweeps/archive/refs/heads/develop.zip"}
param-sweeps = {git = "https://github.com/MiraGeoscience/param-sweeps.git", rev = "develop"}
#param-sweeps = {url = "http://localhost:8888/param-sweeps.tar.gz#sha256="}

#simpeg-drivers = {version = "~0.1.0b4", source = "pypi", allow-prereleases = true}
#simpeg-drivers = {url = "https://github.com/MiraGeoscience/simpeg-drivers/archive/refs/heads/develop.zip"}
simpeg-drivers = {git = "https://github.com/MiraGeoscience/simpeg-drivers.git", rev = "GEOPY-1674"}
#simpeg-drivers = {url = "http://localhost:8888/simpeg-drivers.tar.gz#sha256="}

[tool.conda-lock.dependencies]
## indirect dependencies, forcing them here for installation through Conda not pip
#---------------------------------------------------------------------------------
dask = {version = "2024.6.*", extras = ["distributed"]}  # also in simpeg[dask]
discretize = ">=0.10.0"  # also in simpeg, octree-creation-app
distributed = "2024.6.*"  # because conda-lock doesn't take dask extras into account
libblas = "*=*mkl"
mkl = "2023.2.*"  # from simpeg
Pillow = "10.3.*"
pydiso = "0.0.5"  # from simpeg
pymatsolver = "0.2.0"  # from simpeg
fsspec = "2022.*"  # from simpeg[dask]
geoana = ">=0.5.0"  # from simpeg
h5py = ">=3.2.1"  # from geoh5py
matplotlib = ">=3.8.4"  # from simpeg
pandas = ">=2.2.1"  # from SimPEG, also used by targeting-workflow, petro-lingo
pydantic = ">=2.5.2"  # from geoh5py
scikit-learn = ">=1.4.0"  # from SimPEG, also used by geo-unsup-mapper, petro-lingo
tqdm = ">=4.66.1"  # from simpeg

# force some versions to resolve incompatible resolution between PyPI and Conda
#------------------------------------------------------------------------------
tbb = ">=2021.12.0"  # through mkl from SimPEG
tzdata = ">=2023.4.0"  # through pandas from SimPEG

## about pip dependencies
# to be specified to work with conda-lock
# - from PyPI: my_package = { version = "1.2.3", source = "pypi" }
# - from URL:
#   - for a tags:   my_package = { url = "https://github.com/ORGANISATION/REPO/archive/refs/tags/VERSION_TAG.zip#sha256=" }
#   - for a branch: my_package = { url = "https://github.com/ORGANISATION/REPO/archive/refs/heads/BRANCH.zip#sha256=" }
# Note - conda-lock does not support the syntax: my_package = { git = ... }
#        while poetry2conda supports only { git = "...", tag = "..." }, and not { url = ... }

[tool.poetry.dev-dependencies]
Pygments = "*"
pylint = "*"
pytest = "*"
pytest-cov = "*"
tomli = "*"
sphinx = "^5.0"
readthedocs-sphinx-ext = "*"

[tool.conda-lock]
platforms = ["win-64", "linux-64"]
channels = ["conda-forge", "intel"]

[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
ignore = [
    "B028",  # no-explicit-stacklevel for warnings.warn()
    "E501",  # line-too-long - code is reformatted (do not care about comments and docstring)
    "F401",  # unsused-import - covered by pycln
]
select = [
    "A",  # flake8-builtins
    "B",  # flake8-bugbear
    "B006",  # Do not use mutable data structures for argument defaults
    "B9",  # flake8-bugbear opiniated warnings
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C9",  # mccabe
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "RUF",  # ruff rules
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
    "W",  # pycodestyle warnings
]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.ruff.format]
# default formatting is just fine

[tool.mypy]
warn_unused_configs = true
ignore_missing_imports = true
scripts_are_modules = true
show_error_context = true
show_column_numbers = true
check_untyped_defs = true

plugins = [
    'numpy.typing.mypy_plugin'
]

[tool.coverage.run]
branch = true
source = ["plate_simulation"]

[tool.coverage.report]
exclude_lines = [
    "raise NotImplementedError",
    "pass",
    "if TYPE_CHECKING",
    "pragma: no cover"
]

[tool.coverage.html]
skip_empty = true
skip_covered = true

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"
